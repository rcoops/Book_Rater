<?php

namespace BookRater\RaterBundle\Repository;

use \Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;

/**
 * AuthorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AuthorRepository extends EntityRepository
{

    public function findAllOrderedByNameQB()
    {
        return $this->createQueryBuilder('author')
            ->addOrderBy('author.lastName')
            ->addOrderBy('author.firstName')
            ->addOrderBy('author.initial');
    }

    public function findAllByFilter($filter = '')
    {
        $qb = $this->findAllQueryBuilder($filter);

        return $qb->getQuery();
    }

    public function findAllQueryBuilder($filter = '')
    {
        $qb = $this->findAllOrderedByNameQB();

        if ($filter) {
            $qb
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->like('author.firstName', ':filter'),
                        $qb->expr()->like('author.lastName', ':filter')
                    )
                )
                ->setParameter('filter', '%' . $filter . '%');
        }

        return $qb;
    }

    /**
     * @param string $lastName
     * @param string $firstName
     * @return mixed
     * @throws NonUniqueResultException
     */
    public function findOneByName(string $lastName, string $firstName)
    {
        $qb = $this->createQueryBuilder('author');
        $qb
            ->andWhere(
                $qb->expr()->eq('author.lastName', ':lastName'),
                $qb->expr()->eq('author.firstName', ':firstName')
            )
            ->setParameter('lastName', $lastName)
            ->setParameter('firstName', $firstName);
        return $qb
            ->getQuery()
            ->getOneOrNullResult();
    }

}
