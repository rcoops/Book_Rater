<?php

namespace BookRater\RaterBundle\Repository;

use BookRater\RaterBundle\Entity\Author;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityManagerInterface;
use \Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * BookRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookRepository extends EntityRepository
{

    public function findAllOrderedByNameQB()
    {
        return $this->findAllQueryBuilder()
            ->orderBy('book.title');
    }

    public function findAllByFilter($filter = null)
    {
        $qb = $this->findAllByFilterQueryBuilder($filter);

        return $qb->getQuery();
    }

    public function findAllByFilterQueryBuilder($filter = null)
    {
        $qb = $this->findAllOrderedByNameQB();
        if ($filter) {
            $qb->leftJoin('book.authors', 'book_author')
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->like('book.title', ':filter'),
                        $qb->expr()->like('book_author.firstName', ':filter'),
                        $qb->expr()->like('book_author.lastName', ':filter')
                    )
                )
                ->setParameter('filter', '%'.$filter.'%');
        }
        return $qb;
    }

    public function findAllQueryBuilder()
    {
        return $this->createQueryBuilder('book');
    }

    public function createQueryBuilderForBooks(ArrayCollection $books)
    {
        $qb = $this->createQueryBuilder('book');
        return $qb
            ->andWhere(
                $qb->expr()->in('book.id', ':bookIds')
            )
            ->setParameter('bookIds', $books);
    }

    public function createQueryBuilderForAuthor(Author $author)
    {
        $qb = $this->createQueryBuilder('book');
        return $qb
            ->innerJoin('book.authors', 'author')
            ->andWhere(
                $qb->expr()->eq('author.id', ':author')
            )
            ->setParameter('author', $author->getId());
    }

}
